/*
 * Copyright (C) 2014-2025 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.helger.css.supplementary.main;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.EnumSet;
import java.util.Locale;

import com.helger.base.lang.clazz.ClassHelper;
import com.helger.base.name.IHasName;
import com.helger.base.string.StringHelper;
import com.helger.base.version.Version;
import com.helger.collection.helper.CollectionSort;
import com.helger.css.ECSSSpecification;
import com.helger.css.ECSSVendorPrefix;
import com.helger.css.ECSSVersion;
import com.helger.css.property.ECSSProperty;
import com.helger.datetime.helper.PDTFactory;
import com.helger.io.file.SimpleFileIO;
import com.helger.text.compare.ComparatorHelper;
import com.helger.xml.microdom.IMicroElement;
import com.helger.xml.microdom.MicroElement;
import com.helger.xml.microdom.serialize.MicroWriter;
import com.helger.xml.serialize.write.EXMLSerializeIndent;
import com.helger.xml.serialize.write.EXMLSerializeVersion;
import com.helger.xml.serialize.write.XMLWriterSettings;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

/**
 * Create the src/main/resources/supported-css-properties.html file with all supported properties.
 *
 * @author Philip Helger
 */
public class MainCreateSupportedCSSPropertiesFile
{
  private static void _boolean (@Nonnull final IMicroElement td, final boolean bSet, @Nullable final String sTitle)
  {
    if (bSet)
    {
      td.setAttribute ("class", "center").addText ("X");
      if (StringHelper.isNotEmpty (sTitle))
        td.setAttribute ("title", sTitle);
    }
    else
      td.addText ("");
  }

  public static void main (final String [] args)
  {
    final Locale aLocale = Locale.US;

    final IMicroElement html = new MicroElement ("html");
    final IMicroElement head = html.addElement ("head");
    head.addElement ("title").addText ("Supported CSS properties in ph-css");
    head.addElement ("style")
        .addText ("* {font-family:Arial,Helvetica;}" +
                  " table{border-collapse:collapse;}" +
                  " td,th {border:solid 1px black;padding:3px;vertical-align:top; }" +
                  " .odd{background-color:#ddd;}" +
                  " .center{text-align:center;}" +
                  " .nowrap{white-space:nowrap;}" +
                  " a, a:link, a:visited, a:hover, a:active{color:blue;}");

    final IMicroElement body = html.addElement ("body");

    body.addElement ("div")
        .addText ("Automatically generated by " +
                  ClassHelper.getClassLocalName (MainCreateSupportedCSSPropertiesFile.class) +
                  " on " +
                  new Date ().toString ());

    body.addElement ("div").addElement ("a").setAttribute ("href", "#generic").addText ("Generic properties");
    body.addElement ("div").addElement ("a").setAttribute ("href", "#vendor").addText ("Vendor specific properties");

    body.addElement ("a").setAttribute ("name", "generic").addText ("");
    body.addElement ("h1").addText ("Generic properties");
    IMicroElement table = body.addElement ("table");
    IMicroElement thead = table.addElement ("thead");
    IMicroElement tr = thead.addElement ("tr");
    tr.addElement ("th").addText ("Name");
    tr.addElement ("th").addText ("CSS 1.0");
    tr.addElement ("th").addText ("CSS 2.1");
    tr.addElement ("th").addText ("CSS 3.0");
    tr.addElement ("th").addText ("Links");

    IMicroElement tbody = table.addElement ("tbody");
    int nIndex = 0;
    for (final ECSSProperty eProperty : CollectionSort.getSorted (ECSSProperty.values (),
                                                                  IHasName.getComparatorName ()))
      if (!eProperty.isVendorSpecific ())
      {
        final Version eMinVersion = eProperty.getMinimumCSSVersion ().getVersion ();
        final boolean bCSS10 = eMinVersion.isLE (ECSSVersion.CSS10.getVersion ());
        final boolean bCSS21 = eMinVersion.isLE (ECSSVersion.CSS21.getVersion ());
        final boolean bCSS30 = eMinVersion.isLE (ECSSVersion.CSS30.getVersion ());

        tr = tbody.addElement ("tr");
        if ((nIndex & 1) == 1)
          tr.setAttribute ("class", "odd");
        tr.addElement ("td").setAttribute ("class", "nowrap").addText (eProperty.getName ());
        _boolean (tr.addElement ("td"), bCSS10, null);
        _boolean (tr.addElement ("td"), bCSS21, null);
        _boolean (tr.addElement ("td"), bCSS30, null);

        final IMicroElement td = tr.addElement ("td");
        for (final ECSSSpecification eSpecs : eProperty.getAllSpecifications ())
          if (eSpecs.hasHandledURL ())
            td.addElement ("div")
              .addElement ("a")
              .setAttribute ("href", eSpecs.getHandledURL ())
              .setAttribute ("target", "_blank")
              .addText (eSpecs.getID ());
          else
            td.addElement ("div").addText (eSpecs.getID ());

        ++nIndex;
      }

    // Determine all used vendor prefixes
    final EnumSet <ECSSVendorPrefix> aRequiredPrefixes = EnumSet.noneOf (ECSSVendorPrefix.class);
    for (final ECSSVendorPrefix eVendorPrefix : ECSSVendorPrefix.values ())
    {
      for (final ECSSProperty eProperty : ECSSProperty.values ())
        if (eProperty.isVendorSpecific (eVendorPrefix))
        {
          aRequiredPrefixes.add (eVendorPrefix);
          break;
        }
    }

    body.addElement ("a").setAttribute ("name", "vendor").addText ("");
    body.addElement ("h1").addText ("Vendor specific properties");
    table = body.addElement ("table");
    thead = table.addElement ("thead");
    tr = thead.addElement ("tr");
    tr.addElement ("th").addText ("Name");
    for (final ECSSVendorPrefix e : aRequiredPrefixes)
    {
      final IMicroElement th = tr.addElement ("th");
      th.addText (e.getDisplayName ());
      th.addElement ("span").setAttribute ("class", "nowrap").addText (" (" + e.getPrefix () + ")");
    }

    tbody = table.addElement ("tbody");
    nIndex = 0;

    for (final ECSSProperty eProperty : CollectionSort.getSorted (ECSSProperty.values (),
                                                                  ComparatorHelper.getComparatorCollating (ECSSProperty::getVendorIndependentName,
                                                                                                           aLocale)))
      if (eProperty.isVendorSpecific ())
      {
        tr = tbody.addElement ("tr");
        if ((nIndex & 1) == 1)
          tr.setAttribute ("class", "odd");
        tr.addElement ("td").setAttribute ("class", "nowrap").addText (eProperty.getVendorIndependentName ());

        for (final ECSSVendorPrefix e : aRequiredPrefixes)
          _boolean (tr.addElement ("td"), eProperty.isVendorSpecific (e), eProperty.getName ());

        ++nIndex;
      }

    body.addElement ("div").setAttribute ("style", "margin:2em 0").addText ("That's it.");

    final StringBuilder sHTML = new StringBuilder ("<!--\r\n").append ("\r\n")
                                                              .append ("    Copyright (C) " +
                                                                       PDTFactory.getCurrentYear () +
                                                                       " Philip Helger (www.helger.com)\r\n")
                                                              .append ("    philip[at]helger[dot]com\r\n")
                                                              .append ("\r\n")
                                                              .append ("    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n")
                                                              .append ("    you may not use this file except in compliance with the License.\r\n")
                                                              .append ("    You may obtain a copy of the License at\r\n")
                                                              .append ("\r\n")
                                                              .append ("            http://www.apache.org/licenses/LICENSE-2.0\r\n")
                                                              .append ("\r\n")
                                                              .append ("    Unless required by applicable law or agreed to in writing, software\r\n")
                                                              .append ("    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n")
                                                              .append ("    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n")
                                                              .append ("    See the License for the specific language governing permissions and\r\n")
                                                              .append ("    limitations under the License.\r\n")
                                                              .append ("\r\n")
                                                              .append ("-->\r\n");
    sHTML.append (MicroWriter.getNodeAsString (html,
                                               new XMLWriterSettings ().setIndent (EXMLSerializeIndent.ALIGN_ONLY)
                                                                       .setSerializeVersion (EXMLSerializeVersion.HTML)));

    SimpleFileIO.writeFile (new File ("src/main/resources/supported-css-properties.html"),
                            sHTML.toString (),
                            StandardCharsets.UTF_8);
    System.out.println ("Done");
  }
}
